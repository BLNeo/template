// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: sign_service.proto

package sign

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_sign_service_proto protoreflect.FileDescriptor

var file_sign_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x87, 0x01, 0x0a, 0x04, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x73, 0x69, 0x67, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_sign_service_proto_goTypes = []interface{}{
	(*VerifyTokenRequest)(nil), // 0: sign.VerifyTokenRequest
	(*UserInfoRequest)(nil),    // 1: sign.UserInfoRequest
	(*VerifyTokenRespond)(nil), // 2: sign.VerifyTokenRespond
	(*UserInfoRespond)(nil),    // 3: sign.UserInfoRespond
}
var file_sign_service_proto_depIdxs = []int32{
	0, // 0: Sign.VerifyToken:input_type -> sign.VerifyTokenRequest
	1, // 1: Sign.UserInfo:input_type -> sign.UserInfoRequest
	2, // 2: Sign.VerifyToken:output_type -> sign.VerifyTokenRespond
	3, // 3: Sign.UserInfo:output_type -> sign.UserInfoRespond
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sign_service_proto_init() }
func file_sign_service_proto_init() {
	if File_sign_service_proto != nil {
		return
	}
	file_verify_token_proto_init()
	file_user_info_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sign_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sign_service_proto_goTypes,
		DependencyIndexes: file_sign_service_proto_depIdxs,
	}.Build()
	File_sign_service_proto = out.File
	file_sign_service_proto_rawDesc = nil
	file_sign_service_proto_goTypes = nil
	file_sign_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SignClient is the client API for Sign service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignClient interface {
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenRespond, error)
	UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoRespond, error)
}

type signClient struct {
	cc grpc.ClientConnInterface
}

func NewSignClient(cc grpc.ClientConnInterface) SignClient {
	return &signClient{cc}
}

func (c *signClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenRespond, error) {
	out := new(VerifyTokenRespond)
	err := c.cc.Invoke(ctx, "/Sign/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signClient) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoRespond, error) {
	out := new(UserInfoRespond)
	err := c.cc.Invoke(ctx, "/Sign/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignServer is the server API for Sign service.
type SignServer interface {
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenRespond, error)
	UserInfo(context.Context, *UserInfoRequest) (*UserInfoRespond, error)
}

// UnimplementedSignServer can be embedded to have forward compatible implementations.
type UnimplementedSignServer struct {
}

func (*UnimplementedSignServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (*UnimplementedSignServer) UserInfo(context.Context, *UserInfoRequest) (*UserInfoRespond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}

func RegisterSignServer(s *grpc.Server, srv SignServer) {
	s.RegisterService(&_Sign_serviceDesc, srv)
}

func _Sign_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sign/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sign_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Sign/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServer).UserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sign_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Sign",
	HandlerType: (*SignServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _Sign_VerifyToken_Handler,
		},
		{
			MethodName: "UserInfo",
			Handler:    _Sign_UserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sign_service.proto",
}
